@page "/Calender"
@using System.Globalization
@using MærkeDageCalender.Data
@using Newtonsoft.Json;
@using System.Net.Http.Json
@using DataAccessLibrary
@using DataAccessLibrary.ApiAccess
@using DataAccessLibrary.Models

@inject ICRUD<BirthdayModel> _db
@inject EntityFrameworkCRUD entity
@inject SqlConnectionCRUD sqlcon
@inject LinQCRUD linq
@inject SallingApiAccess access
@inject Date date
@inject SelectedOptionService SelectedOptionService
@inject NavigationManager _navigationManager
@inject PublicHolidayLists holidayLists

<h3>Calender</h3>
<h1>@date.monthName, @date.year</h1>
<button @onclick="() => {date.monthsAway--; date.CreateMonth();}" type="button" class="btn btn-primary" style="margin-bottom: 5px;">Previous Month</button>
<button @onclick="() => {date.monthsAway++; date.CreateMonth();}" type="button" class="btn btn-danger" style="margin-left: 10px; margin-bottom: 5px">Next Month</button>


@code {
    private List<BirthdayModel> ListofBirthdays = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOnLaunch();
    }

    private async Task LoadOnLaunch()
    {
        date.CreateMonth();
        if (SelectedOptionService.SelectedOption == CRUDTypeEnum.entityFramework.ToString())
        {
            ListofBirthdays = entity.ReadAllBirthdays();
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.sqlCon.ToString())
        {
            ListofBirthdays = sqlcon.ReadAllBirthdays();
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.linQ.ToString())
        {
            ListofBirthdays = linq.ReadAllBirthdays();
        }

        if (holidayLists.ListofHolidays == null || holidayLists.ListofHolidays.Count == 0)
        {
            holidayLists.ListofHolidays = await access.GetPublicHolidays();
        }
        StateHasChanged();
        
    }

    void ReloadPage()
    {
        _navigationManager.NavigateTo("/Calender", true);
    }

    void UpdatePage(int eventId)
    {
        _navigationManager.NavigateTo($"/event/update/{eventId}");
    }

    private void DeleteAndRefresh(int id)
    {
        if (SelectedOptionService.SelectedOption == CRUDTypeEnum.entityFramework.ToString())
        {
            entity.DeleteBirthday(id);
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.sqlCon.ToString())
        {
            sqlcon.DeleteBirthday(id);
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.linQ.ToString())
        {
            linq.DeleteBirthday(id);
        }

        var itemToRemove = ListofBirthdays.FirstOrDefault(item => item.Id == id);
        if (itemToRemove != null)
        {
            ListofBirthdays.Remove(itemToRemove);
        }
        StateHasChanged();
    }
}

<section>
    @for (int i = 0; i < date.numDummyColumn; i++)
    {
        <div></div>
    }
    @for (int i = 1; i <= date.monthEnd.Day; i++)
    {

        <div>
            <h2>@i</h2>
            @if (holidayLists.ListofHolidays != null)
            {
                @foreach (var item in holidayLists.ListofHolidays.Where(n => n.date.Date == new DateTime(date.year, date.currentMonth, i).Date))
                {
                    <p style="color: darkblue">@item.name</p>
                    @if (@item.nationalHoliday == "false")
                    {
                        <p style="color: blue">Mærkedag</p>
                    }
                    else if (@item.nationalHoliday == "true")
                    {
                        <p style="color: blue">Helligdag</p>
                    }
                }
            }

            @if (ListofBirthdays != null)
            {
                @foreach (var birthday in ListofBirthdays.Where(n => n.Date.Date == new DateTime(date.year, date.currentMonth, i).Date))
                {
                    <p style="color: green">@birthday.EventName</p>
                    <p style="color: blue">@SelectedOptionService.SelectedOption.ToString()</p>
                    <button @onclick="() => UpdatePage(birthday.Id)" type="button" class="btn btn-primary" style="margin-bottom: 5px">Update</button>
                    <button @onclick="() => DeleteAndRefresh(birthday.Id)" type="button" class="btn btn-danger" style="margin-bottom: 5px">Delete</button>
                }
            }
        </div>
    }
</section>
