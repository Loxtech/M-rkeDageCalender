@page "/Calender"
@using System.Globalization
@using MærkeDageCalender.Data
@using Newtonsoft.Json;
@using System.Net.Http.Json
@using DataAccessLibrary
@using DataAccessLibrary.ApiAccess
@using DataAccessLibrary.Models

@inject ICRUD<BirthdayModel> _db

<h3>Calender</h3>
<h1>@monthName, @year</h1>
<button @onclick="() => {monthsAway--; CreateMonth();}" type="button" class="btn btn-primary" style="margin-bottom: 5px;">Previous Month</button>
<button @onclick="() => {monthsAway++; CreateMonth();}" type="button" class="btn btn-danger" style="margin-left: 10px; margin-bottom: 5px">Next Month</button>


@inject EntityFrameworkCRUD entity
@code{

    string getMonthName = "";
    string monthName = "";
    DateTime monthEnd;
    int monthsAway = 0;
    int numDummyColumn = 0;
    int year = 2023;
    int month = 0;
    List<PublicHolidayModel> publicHolidaysList = new List<PublicHolidayModel>();
    List<BirthdayModel> birthdayList = new List<BirthdayModel>();

    private BirthdayModel newBirthday = new BirthdayModel();
    public void AddBirthday()
    {
        entity.CreateBirthday(newBirthday);
        newBirthday = new BirthdayModel();
    }

    void CreateMonth()
    {
        var tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;

        DateTime monthStart = new DateTime(year, month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);
        getMonthName = DateTimeFormatInfo.CurrentInfo.GetMonthName(month);
        monthName = $"{getMonthName[0].ToString().ToUpper()}{getMonthName.Substring(1)}";

        numDummyColumn = (int)monthStart.DayOfWeek;
    }

    protected override async Task OnInitializedAsync()
    {
        CreateMonth();
        //await GetPublicHolidays();
        SallingApiAccess apiAccess = new SallingApiAccess();
        await apiAccess.GetPublicHolidays(); 
        List<PublicHolidayModel> publicHolidays = apiAccess.GetPublicHolidaysList(); 
        birthdayList = _db.ReadAllBirthdays();
    }

     //Load mærkedage from API
    
}

<section>
    @for (int i = 0; i < numDummyColumn; i++)
    {
        <div></div>
    }
    @for (int i = 1; i <= monthEnd.Day; i++)
    {
        var calenderItem = publicHolidaysList.FirstOrDefault(n => n.date == new DateTime(year, month, i));
        var calenderBirthday = birthdayList.FirstOrDefault(n => n.Date == new DateTime(year, month, i));

        <div>
            <h2>@i</h2>
            @if (calenderItem != null)
            {
                <p style="color: darkblue">@calenderItem.name</p>
                @if (@calenderItem.nationalHoliday == "false")
                {
                    <p style="color: blue">Mærkedag</p>
                }
                else if(@calenderItem.nationalHoliday == "true")
                {
                    <p style="color: blue">Helligdag</p>
                }
            }

            @if (calenderBirthday != null)
            {
                <p style="color: red">@calenderBirthday.EventName fødselsdag</p>
                

            }
        </div>
    }
</section>
