@page "/Calender"
@using System.Globalization
@using MærkeDageCalender.Data
@using Newtonsoft.Json;
@using System.Net.Http.Json
@using DataAccessLibrary
@using DataAccessLibrary.ApiAccess
@using DataAccessLibrary.Models


@inject ICRUD<BirthdayModel> _db
@inject EntityFrameworkCRUD entity
@inject SqlConnectionCRUD sqlcon
@inject LinQCRUD linq
@inject SallingApiAccess access
@inject Date date
@inject SelectedOptionService SelectedOptionService


<h3>Calender</h3>
<h1>@date.monthName, @date.year</h1>
<button @onclick="() => {date.monthsAway--; date.CreateMonth();}" type="button" class="btn btn-primary" style="margin-bottom: 5px;">Previous Month</button>
<button @onclick="() => {date.monthsAway++; date.CreateMonth();}" type="button" class="btn btn-danger" style="margin-left: 10px; margin-bottom: 5px">Next Month</button>


@code {
    List<PublicHolidayModel> publicHolidaysList = new List<PublicHolidayModel>();
    List<BirthdayModel> birthdayList = new List<BirthdayModel>();
    private BirthdayModel newBirthday = new BirthdayModel();

    protected override async Task OnInitializedAsync()
    {
        date.CreateMonth();
        await access.GetPublicHolidays();
        publicHolidaysList = access.GetPublicHolidaysList();
        birthdayList = _db.ReadAllBirthdays();
    }
}

<section>
    @for (int i = 0; i < date.numDummyColumn; i++)
    {
        <div></div>
    }
    @for (int i = 1; i <= date.monthEnd.Day; i++)
    {
        var calenderItem = publicHolidaysList.FirstOrDefault(n => n.date == new DateTime(date.year, date.currentMonth, i));
        var calenderBirthday = birthdayList.FirstOrDefault(n => n.Date == new DateTime(date.year, date.currentMonth, i));

        <div>
            <h2>@i</h2>
            @if (calenderItem != null)
            {
                <p style="color: darkblue">@calenderItem.name</p>
                @if (@calenderItem.nationalHoliday == "false")
                {
                    <p style="color: blue">Mærkedag</p>
                }
                else if (@calenderItem.nationalHoliday == "true")
                {
                    <p style="color: blue">Helligdag</p>
                }
            }

            @if (calenderBirthday != null)
            {
                <p style="color: green">@calenderBirthday.EventName</p>
                if (SelectedOptionService.SelectedOption == "1")
                {
                    <p style="color: blue">Entity</p>
                    <button @onclick="() => {entity.UpdateBirthday(calenderBirthday);}" type="button" class="btn btn-primary" style="margin-bottom: 5px">Update</button>
                    <button @onclick="() => {entity.DeleteBirthday(calenderBirthday.Id);}" type="button" class="btn btn-danger" style="margin-bottom: 5px">Delete</button>
                }
                else if (SelectedOptionService.SelectedOption == "2")
                {
                    <p style="color: blue">SqlCon</p>
                    <button @onclick="() => {sqlcon.UpdateBirthday(calenderBirthday);}" type="button" class="btn btn-primary" style="margin-bottom: 5px">Update</button>
                    <button @onclick="() => {sqlcon.DeleteBirthday(calenderBirthday.Id);}" type="button" class="btn btn-danger" style="margin-bottom: 5px">Delete</button>
                }
                else if (SelectedOptionService.SelectedOption == "3")
                {
                    <p style="color: blue">LinQ</p>
                    <button @onclick="() => {linq.UpdateBirthday(calenderBirthday);}" type="button" class="btn btn-primary" style="margin-bottom: 5px">Update</button>
                    <button @onclick="() => {linq.DeleteBirthday(calenderBirthday.Id);}" type="button" class="btn btn-danger" style="margin-bottom: 5px">Delete</button>
                }
                
            }
        </div>
    }
</section>
