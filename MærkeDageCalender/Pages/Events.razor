@page "/Events"

@using MærkeDageCalender.Data
@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject ICRUDEvent<EventModel> _db
@inject EntityFrameworkCRUD entity
@inject SqlConnectionCRUD sqlcon
@inject SelectedOptionService SelectedOptionService
@inject NavigationManager _navigationManager
@inject EventLists EventLists
@inject EventModel EventModel

<h3>Add Events</h3>
<form @onsubmit="AddNewEvent">
    <div class="form-group">
        <label for="Name">Event Name</label>
        <input type="text" class="form-control" id="Name" @bind="EventModel.EventName">
    </div>
    <div class="form-group">
        <label for="Date">Date of Event</label>
        <input type="date" class="form-control" id="Date" @bind="selectedDate">
    </div>
    <button type="submit" class="btn btn-primary">
        <ion-icon name="add-circle-outline" size="large" aria-label="true"></ion-icon>
    </button>
</form>

<h3>All Events</h3>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name of Event</th>
            <th>Date of Event</th>
            <th>Update Event</th>
            <th>Delete Event</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in EventLists.ListofEvents)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.EventName</td>
                <td>@item.Date.ToShortDateString()</td>
                <td><button @onclick="() => UpdatePage(item.Id)" type="button" class="btn btn-primary" >
                    <ion-icon name="build-outline" size="large" aria-hidden="true"></ion-icon></button></td>
                <td><button @onclick="() => DeleteAndRefresh(item.Id)" type="button" class="btn btn-danger" >
                    <ion-icon name="remove-circle-outline" size="large" aria-hidden="true"></ion-icon></button></td>

            </tr>
        }
    </tbody>
</table>

@code {
    private DateTime selectedDate = DateTime.Now;

    protected override async Task OnInitializedAsync() => EventLists.ListofEvents = _db.ReadAllEvents();

    public void AddNewEvent()
    {
        EventModel.Date = selectedDate;

        if (SelectedOptionService.SelectedOption == CRUDTypeEnum.entityFramework.ToString())
        {
            entity.CreateEvent(EventModel);
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.sqlCon.ToString())
        {
            sqlcon.CreateEvent(EventModel);
        }

        ReloadPage();
    }

    void UpdatePage(int eventId)
    {
        _navigationManager.NavigateTo($"/event/update/{eventId}");
    }

    private void DeleteAndRefresh(int id)
    {
        if (SelectedOptionService.SelectedOption == CRUDTypeEnum.entityFramework.ToString())
        {
            entity.DeleteEvent(id);
        }
        else if (SelectedOptionService.SelectedOption == CRUDTypeEnum.sqlCon.ToString())
        {
            sqlcon.DeleteEvent(id);
        }

        var itemToRemove = EventLists.ListofEvents.FirstOrDefault(item => item.Id == id);
        if (itemToRemove != null)
        {
            EventLists.ListofEvents.Remove(itemToRemove);
        }

        StateHasChanged();
        ReloadPage();
    }

    private void ReloadPage()
    {
        _navigationManager.NavigateTo("/Events", true);
    }
}
