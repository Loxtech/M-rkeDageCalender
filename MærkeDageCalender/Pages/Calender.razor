@page "/Calender"
@using System.Globalization
@using Newtonsoft.Json;
@using System.Net.Http.Json

<h3>Calender</h3>
<h1>@monthName, @year</h1>
<button @onclick="() => {monthsAway--; CreateMonth();}" type="button" class="btn btn-primary" style="margin-bottom: 5px;">Previous Month</button>
<button @onclick="() => {monthsAway++; CreateMonth();}" type="button" class="btn btn-danger" style="margin-left: 10px; margin-bottom: 5px">Next Month</button>

@code {
    string getMonthName = "";
    string monthName = "";
    DateTime monthEnd;
    int monthsAway = 0;
    int numDummyColumn = 0;
    int year = 2023;
    int month = 0;
    List<PublicHoliday> publicHolidaysList = new List<PublicHoliday>();

    void CreateMonth()
    {
        var tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;

        DateTime monthStart = new DateTime(year, month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);
        getMonthName = DateTimeFormatInfo.CurrentInfo.GetMonthName(month);
        monthName = $"{getMonthName[0].ToString().ToUpper()}{getMonthName.Substring(1)}";

        numDummyColumn = (int)monthStart.DayOfWeek;
    }

    protected override async Task OnInitializedAsync()
    {
        CreateMonth();
        await GetPublicHolidays();
    }

    public async Task GetPublicHolidays()
    {
        var httpClient = new HttpClient();
        string apiUrl = "https://api.sallinggroup.com/v1/holidays?startDate=2020-01-01&endDate=2025-12-31";
        string apiToken = "706fa95d-511a-4ce7-bca6-c58f2bd5bf0a";
        httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiToken}");
        string jsonContent = "{\"key\": \"\value\"}";
        HttpContent content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

        //var response = await httpClient.GetFromJsonAsync<List<PublicHoliday>>($"{apiUrl}, Authorization: Bearer {apiToken}");
        HttpResponseMessage response = await httpClient.GetAsync($"{apiUrl}");

        if (response.IsSuccessStatusCode)
        {
            //publicHolidaysList = response;
                string responseBody = await response.Content.ReadAsStringAsync();
                List<PublicHoliday> apiModels = JsonConvert.DeserializeObject<List<PublicHoliday>>(responseBody);
                publicHolidaysList.AddRange(apiModels);
        }
        else
            {
                // Handle error response
                Console.WriteLine($"Error: {response.StatusCode}");
            }
    }
}

<section>
    @for (int i = 0; i < numDummyColumn; i++)
    {
        <div></div>
    }
    @for (int i = 1; i <= monthEnd.Day; i++)
    {
        var calenderItem = publicHolidaysList.FirstOrDefault(n => n.date == new DateTime(year, month, i));

        <div>
            <h2>@i</h2>
            @if (calenderItem != null)
            {
                <p style="color: darkblue">@calenderItem.name</p>
                @if (@calenderItem.nationalHoliday == "false")
                {
                    <p style="color: blue">Mærkedag</p>
                }
                else if(@calenderItem.nationalHoliday == "true")
                {
                    <p style="color: blue">Helligdag</p>
                }
            }
        </div>
    }
</section>
